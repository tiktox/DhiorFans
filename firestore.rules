rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // ===== FUNCIONES AUXILIARES =====
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidFollowOperation() {
      return isAuthenticated() && 
             request.auth.uid == request.resource.data.followerId &&
             request.resource.data.keys().hasAll(['followerId', 'followingId', 'timestamp']) &&
             request.resource.data.keys().hasOnly(['followerId', 'followingId', 'timestamp']);
    }
    
    function isValidUserUpdate() {
      let allowedFields = ['followers', 'following', 'posts', 'profilePicture', 'bio', 'fullName', 'link', 'gender', 'username'];
      return request.resource.data.diff(resource.data).affectedKeys().hasAny(allowedFields);
    }

    // ===== USUARIOS =====
    match /users/{userId} {
      allow read: if true;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) || 
                      (isAuthenticated() && isValidUserUpdate());
      allow delete: if isOwner(userId);
    }

    // ===== POSTS =====
    match /posts/{postId} {
      allow read: if true;
      allow create: if isAuthenticated() && 
                      request.auth.uid == request.resource.data.userId;
      allow update: if isAuthenticated() && 
                      (request.auth.uid == resource.data.userId ||
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'comments', 'commentsCount']));
      allow delete: if isAuthenticated() && 
                      request.auth.uid == resource.data.userId;
    }

    // ===== REELS =====
    match /reels/{reelId} {
      allow read: if true;
      allow create: if isAuthenticated() && 
                      request.auth.uid == request.resource.data.userId;
      allow update: if isAuthenticated() && 
                      (request.auth.uid == resource.data.userId ||
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'comments', 'commentsCount']));
      allow delete: if isAuthenticated() && 
                      request.auth.uid == resource.data.userId;
    }

    // ===== COMENTARIOS =====
    match /comments/{commentId} {
      allow read: if true;
      allow create: if isAuthenticated() && 
                      request.auth.uid == request.resource.data.userId;
      allow update: if isAuthenticated() && 
                      request.auth.uid == resource.data.userId;
      allow delete: if isAuthenticated() && 
                      request.auth.uid == resource.data.userId;
    }

    // ===== LIKES =====
    match /likes/{likeId} {
      allow read: if true;
      allow create: if isAuthenticated() && 
                      request.auth.uid == request.resource.data.userId;
      allow delete: if isAuthenticated() && 
                      request.auth.uid == resource.data.userId;
    }

    // ===== FOLLOWS (CR√çTICO PARA EL PROBLEMA) =====
    match /follows/{followId} {
      allow read: if true;
      allow create: if isValidFollowOperation();
      allow delete: if isAuthenticated() && 
                      request.auth.uid == resource.data.followerId;
    }

    // ===== TOKENS =====
    match /tokens/{userId} {
      allow read: if true;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) || 
                      (isAuthenticated() && 
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['followersCount']));
    }

    // ===== TRANSACCIONES DE TOKENS =====
    match /tokenTransactions/{transactionId} {
      allow read: if isAuthenticated() && 
                    (request.auth.uid == resource.data.userId || 
                     ('recipientId' in resource.data && request.auth.uid == resource.data.recipientId));
      allow create: if isAuthenticated() && 
                      request.auth.uid == request.resource.data.userId;
    }

    // ===== REPORTES =====
    match /reports/{reportId} {
      allow create: if isAuthenticated() && 
                      request.auth.uid == request.resource.data.reporterId;
    }

    // ===== NOTIFICACIONES =====
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && 
                    request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
                      request.auth.uid == resource.data.userId;
      allow delete: if isAuthenticated() && 
                      request.auth.uid == resource.data.userId;
    }

    // ===== CONFIGURACIONES DE USUARIO =====
    match /userSettings/{userId} {
      allow read, write: if isOwner(userId);
    }
  }
}