rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // ===== USUARIOS =====
    match /users/{userId} {
      allow read: if true;
      allow write: if request.auth != null && 
        (request.auth.uid == userId || 
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['followers', 'following', 'posts']));
    }

    // ===== POSTS =====
    match /posts/{postId} {
      allow read: if true;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow update: if request.auth != null && 
        (request.auth.uid == resource.data.userId ||
         (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'comments', 'commentsCount']) &&
          (!('commentsCount' in request.resource.data.diff(resource.data).changedKeys()) ||
           request.resource.data.commentsCount == resource.data.commentsCount + 1 ||
           request.resource.data.commentsCount == resource.data.commentsCount - 1)) ||
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isActive', 'winnerId', 'winnerKeyword', 'winnerTimestamp']));
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // ===== REELS =====
    match /reels/{reelId} {
      allow read: if true;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow update: if request.auth != null && 
        (request.auth.uid == resource.data.userId ||
         (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'comments', 'commentsCount']) &&
          (!('commentsCount' in request.resource.data.diff(resource.data).changedKeys()) ||
           request.resource.data.commentsCount == resource.data.commentsCount + 1 ||
           request.resource.data.commentsCount == resource.data.commentsCount - 1)) ||
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isActive', 'winnerId', 'winnerKeyword', 'winnerTimestamp']));
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // ===== COMENTARIOS =====
    match /comments/{commentId} {
      allow read: if true;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow update: if request.auth != null && request.auth.uid == resource.data.userId;
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // ===== LIKES =====
    match /likes/{likeId} {
      allow read: if true;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // ===== FOLLOWS (SIMPLIFICADO) =====
    match /follows/{followId} {
      allow read: if true;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.followerId;
      allow delete: if request.auth != null && request.auth.uid == resource.data.followerId;
    }

    // ===== TOKENS =====
    match /tokens/{userId} {
      allow read: if true;
      allow write: if request.auth != null;
    }

    // ===== TRANSACCIONES DE TOKENS =====
    match /tokenTransactions/{transactionId} {
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.userId || 
         ('recipientId' in resource.data && request.auth.uid == resource.data.recipientId));
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }

    // ===== REPORTES =====
    match /reports/{reportId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.reporterId;
    }

    // ===== NOTIFICACIONES =====
    match /notifications/{notificationId} {
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null;
      allow update: if request.auth != null && request.auth.uid == resource.data.userId;
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // ===== MENSAJES =====
    match /messages/{messageId} {
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.senderId || 
         request.auth.uid == resource.data.receiverId);
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.senderId;
      allow update: if request.auth != null && 
        (request.auth.uid == resource.data.senderId || 
         request.auth.uid == resource.data.receiverId) &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isRead']);
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.senderId;
    }

    // ===== CONFIGURACIONES DE USUARIO =====
    match /userSettings/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // ===== AUDIOS =====
    match /audios/{audioId} {
      allow read: if true;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow update: if request.auth != null && request.auth.uid == resource.data.userId;
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
  }
}